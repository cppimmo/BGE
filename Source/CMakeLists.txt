# CMakeList.txt: Top-level CMake project file, do global configuration and include sub-projects here.

cmake_minimum_required(VERSION 3.21)
project(BGE)
# Set the configuration types intended for use with any and all sub-projects:
set(CMAKE_CONFIGURATION_TYPES Debug Release) # Profile
set(CMAKE_DEBUG_POSTFIX "") # Empty CMAKE_DEBUG_POSTFIX
# Set the C++ standard.
set(CMAKE_CXX_STANDARD 20)
set(CMAKE_CXX_STANDARD_REQUIRED On)
set(CMAKE_CXX_EXTENSIONS Off)
if(UNIX)
	set(CMAKE_POSITION_INDEPENDENT_CODE On) # Needs to be set on non-Windows for linking static libs to shared
endif()
set(CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS On) # This is needed on Windows to generate a .lib file for shared libs

set_property(GLOBAL PROPERTY USE_FOLDERS ON)

# Add preprocessor defines for the available configurations:
add_compile_definitions($<$<CONFIG:Debug>:BGE_CONFIG_DEBUG>
						$<$<CONFIG:Profile>:BGE_CONFIG_PROFILE>
						$<$<CONFIG:Release>:BGE_CONFIG_RELEASE>)

# Macro creates a list of source file matching expression named LIST with
# SOURCE_DIR prepended to each pattern.
macro(get_sources_match_list LIST SOURCE_DIR)
	file(GLOB_RECURSE ${LIST} LIST_DIRECTORIES true CONFIGURE_DEPENDS
		"${SOURCE_DIR}/*.cpp"
		"${SOURCE_DIR}/*.hpp"
		"${SOURCE_DIR}/*.ipp"
		"${SOURCE_DIR}/*.h")
endmacro()

# Set the output directory for our shared library binaries:
# TARGET_NAME is the name of the target.
# OUTPUT_DIR is the directory stored in an environment variable (most-likely).
macro(set_target_output_directory TARGET_NAME OUTPUT_DIR)
	# The $<0:> removes the Debug & Release folders generated by Visual Studio.
	set_target_properties(${TARGET_NAME} PROPERTIES
		RUNTIME_OUTPUT_DIRECTORY ${OUTPUT_DIR}$<0:>
		LIBRARY_OUTPUT_DIRECTORY ${OUTPUT_DIR}$<0:>
		ARCHIVE_OUTPUT_DIRECTORY ${OUTPUT_DIR}$<0:>)
	# Loop through project-wide configuration type:
	foreach(OUTPUT_CONFIGURATION ${CMAKE_CONFIGURATION_TYPES})
		string(TOUPPER ${OUTPUT_CONFIGURATION} OUTPUT_CONFIGURATION)
		set_target_properties(${TARGET_NAME} PROPERTIES
			CMAKE_RUNTIME_OUTPUT_DIRECTORY_${OUTPUT_CONFIGURATION} ${OUTPUT_DIR}$<0:>
			CMAKE_LIBRARY_OUTPUT_DIRECTORY_${OUTPUT_CONFIGURATION} ${OUTPUT_DIR}$<0:>
			CMAKE_ARCHIVE_OUTPUT_DIRECTORY_${OUTPUT_CONFIGURATION} ${OUTPUT_DIR}$<0:>)
	endforeach()
endmacro()

# Creates directory tree of soure files in soultion explorer menu.
function(create_source_group SRC_FILES)
    #message(STATUS "CMAKE_CURRENT_SOURCE_DIR=${CMAKE_CURRENT_SOURCE_DIR}")
	#message(STATUS "SRC_FILES=${SRC_FILES}")
	source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} PREFIX "Source Files" FILES ${SRC_FILES})
endfunction()

set(LIB_DIR "../Source/Lib")

# SDL library:
if(WIN32)
	set(SDL2_DIR "Lib/SDL2-2.26.3/cmake")
endif()
find_package(SDL2 REQUIRED)
include_directories(${SDL2_INCLUDE_DIRS})

# ImGui library:
set(IMGUI_DIR "Lib/imgui")
add_library(ImGui STATIC
	"${IMGUI_DIR}/imgui.cpp"
	"${IMGUI_DIR}/imgui_demo.cpp"
	"${IMGUI_DIR}/imgui_draw.cpp"
	"${IMGUI_DIR}/imgui_tables.cpp"
	"${IMGUI_DIR}/imgui_widgets.cpp"
	"${IMGUI_DIR}/backends/imgui_impl_sdl2.cpp"
	"${IMGUI_DIR}/backends/imgui_impl_opengl3.cpp")
# Set to public so other targets will inherit
target_include_directories(ImGui PUBLIC ${SDL2_INCLUDE_DIRS} ${IMGUI_DIR} "${IMGUI_DIR}/backends")

# ImPlot library:
set(IMPLOT_DIR "Lib/implot")
add_library(ImPlot STATIC
	"${IMPLOT_DIR}/implot.cpp"
	"${IMPLOT_DIR}/implot_demo.cpp"
	"${IMPLOT_DIR}/implot_items.cpp")
target_include_directories(ImPlot PUBLIC ${IMGUI_DIR} ${IMPLOT_DIR})

# OpenAL-soft library:
if(WIN32)
	# Must set the OPENALDIR environment variable on Windows
	#set(ENV{OPENALDIR} "Lib/openal-soft-makemhr/cmake")
	set(OPENAL_LIBRARY $ENV{OPENALDIR})
	string(REGEX REPLACE "cmake" "" INC_DIR "$ENV{OPENALDIR}") # "regex" "replacement regex" OUT_VAR INPUT
	set(OPENAL_INCLUDE_DIR "${INC_DIR}/include")
endif()
find_package(OpenAL REQUIRED)
include_directories(${OPENAL_INCLUDE_DIRS})

# glad library:
set(GLAD_DIR "Lib/glad")
add_library(glad STATIC "${GLAD_DIR}/src/gl.c")
target_include_directories(glad PUBLIC "${GLAD_DIR}/include")

# tinyxml2 library:
set(TINYXML_DIR "Lib/tinyxml2")
add_library(TinyXml2 STATIC "${TINYXML_DIR}/tinyxml2.cpp")
target_include_directories(TinyXml2 PUBLIC ${TINYXML_DIR})

# Engine Project:
set(ENGINE_SRC_DIR "BGE")

add_library(Engine SHARED)

target_include_directories(Engine PUBLIC "${ENGINE_SRC_DIR}" ${OPENAL_INCLUDE_DIR}) #"${Boost_INCLUDE_DIRS}")

get_sources_match_list(ENGINE_SRC_FILES "${ENGINE_SRC_DIR}")
source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} PREFIX "Source Files" FILES ${ENGINE_SRC_FILES})
target_sources(Engine PRIVATE ${ENGINE_SRC_FILES})

if(WIN32)
	target_compile_options(Engine PUBLIC "/MP")
endif()

target_link_libraries(Engine ${SDL2_LIBRARIES} ImGui ImPlot glad TinyXml2 ${OPENAL_LIBRARIES}) #${Boost_LIBRARIES})

if(WIN32)
	# Set the CWD for the debugger to start the program
	set_target_properties(Engine PROPERTIES VS_DEBUGGER_WORKING_DIRECTORY $<TARGET_FILE_DIR:Engine>)
endif()

add_custom_command(TARGET Engine POST_BUILD
	COMMAND ${CMAKE_COMMAND} -E copy_if_different
	"../Game/Engine.xml" $<TARGET_FILE_DIR:Engine>
	"../Game/Logging.xml" $<TARGET_FILE_DIR:Engine>)

if(WIN32)
	add_custom_command(TARGET Engine POST_BUILD
		COMMAND ${CMAKE_COMMAND} -E copy_if_different
		"${LIB_DIR}/SDL2-2.26.3/lib/x64/SDL2.dll" $<TARGET_FILE_DIR:Engine>)
endif()

# Editor Projects:
set(EDITOR_SRC_DIR "BGEEditor")

add_library(EditorLib SHARED)

target_include_directories(EditorLib PUBLIC "${EDITOR_SRC_DIR}/EditorLib")

get_sources_match_list(EDITOR_SRC_FILES "${EDITOR_SRC_DIR}")
source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} PREFIX "Source Files" FILES ${EDITOR_SRC_FILES})
target_sources(EditorLib PRIVATE ${EDITOR_SRC_DIR})

target_link_libraries(EditorLib Engine)

add_executable(TankBattlesEditorApp)

target_include_directories(TankBattlesEditorApp PUBLIC "${EDITOR_SRC_DIR}/EditorApp")

get_sources_match_list(EDITOR_SRC_FILES "${EDITOR_SRC_DIR}/EditorApp")
source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} PREFIX "Source Files" FILES ${EDITOR_SRC_FILES})
target_sources(TankBattlesEditorApp PRIVATE ${EDITOR_SRC_DIR})

target_link_libraries(TankBattlesEditorApp Engine EditorLib)

# Game Projects:
set(GAME_SRC_DIR "TestGame")

add_executable(Game)

target_include_directories(Game PUBLIC "${GAME_SRC_DIR}")

get_sources_match_list(GAME_SRC_FILES "${GAME_SRC_DIR}")
source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} PREFIX "Source Files" FILES ${GAME_SRC_FILES})
target_sources(Game PRIVATE ${GAME_SRC_FILES})

target_link_libraries(Game Engine)
